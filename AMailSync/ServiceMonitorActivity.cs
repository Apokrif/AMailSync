///////////////////////////////////////////////////////////
//  ServiceMonitorActivity.cs
//  Implementation of the Class ServiceMonitorActivity
//  Generated by Enterprise Architect
//  Created on:      14-Aug-2016 7:34:51 PM
//  Original author: Apocrypha
///////////////////////////////////////////////////////////

using System;
using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace AMailSync {
	[Activity(Label = "Service Monitor", MainLauncher = true)]
	public class ServiceMonitorActivity : Activity {

		public class DemoServiceConnection : Java.Lang.Object, IServiceConnection {

			private ServiceMonitorActivity activity;
			private TimeServiceBinder binder;

            public DemoServiceConnection(){

			}

			~DemoServiceConnection(){

			}
            
            /// 
            /// <param name="activity"></param>
            public DemoServiceConnection(ServiceMonitorActivity activity){

			}

			public TimeServiceBinder Binder{
				get;
			}

			/// 
			/// <param name="name"></param>
			/// <param name="service"></param>
			public void OnServiceConnected(ComponentName name, IBinder service){

			}

			/// 
			/// <param name="name"></param>
			public void OnServiceDisconnected(ComponentName name){

			}

		}//end DemoServiceConnection

		private TimeServiceBinder binder;
		/// <summary>
		/// com.xamarin.DemoService
		/// </summary>
		private static readonly string ComXamarinDemoservice = "com.xamarin.SoleService";
		private ServiceMonitorActivity.DemoServiceConnection demoServiceConnection;
		private bool isBound = false;
		private bool isConfigurationChange = false;

		public ServiceMonitorActivity(){

		}

		~ServiceMonitorActivity(){

		}

		private void CheckBound(){

		}

		private void InitializeContetnt(){

		}
        #region LifeCycle

        /// 
        /// <param name="bundle"></param>
        protected override void OnCreate(Bundle bundle){

		}

		protected override void OnDestroy(){

		}

		/// <summary>
		/// return the service connection if there is a configuration change
		/// </summary>
		public override Java.Lang.Object OnRetainNonConfigurationInstance(){

			return null;
		}

		/// <summary>
		/// BindServiceByIntent using demoServiceConnection
		/// </summary>
		protected override void OnStart(){

		}
        #endregion

        void CallTimeService() {
            RunOnUiThread(() => {
                string text = binder.GetTimeService().GetTime();
                Console.WriteLine("{0} returned from Sole Service", text);
            });
        }


    }//end ServiceMonitorActivity

}//end namespace DemoService